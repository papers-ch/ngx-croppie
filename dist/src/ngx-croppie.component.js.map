{"version":3,"file":"ngx-croppie.component.js","sourceRoot":"","sources":["../../src/ngx-croppie.component.ts"],"names":[],"mappings":";;;;;;AACA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAsD,SAAS,EAAc,MAAM,eAAe,CAAC;AAClJ,OAAO,OAAO,MAAM,SAAS,CAAC;AAc9B;IAJA;QASa,wBAAmB,GAAsB,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;QAC7E,WAAM,GAAkE,IAAI,YAAY,EAAmD,CAAC;IAmB1J,CAAC;IAhBG,sCAAQ,GAAR;QAAA,iBASC;QARG,IAAI,CAAC,QAAQ,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QAE/E,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;YACf,GAAG,EAAE,IAAI,CAAC,QAAQ;SACrB,CAAC,CAAC;QACH,IAAI,CAAC,IAAI,GAAG,UAAC,GAAW;YACpB,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,KAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC/C,CAAC,CAAA;IACL,CAAC;IAED,uCAAS,GAAT;QAAA,iBAIC;QAHG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,UAAC,GAAG;YACpD,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;IACP,CAAC;IAvBuB;QAAvB,SAAS,CAAC,WAAW,CAAC;0DAAuB;IACrC;QAAR,KAAK,EAAE;+DAAgC;IAC/B;QAAR,KAAK,EAAE;yDAAkB;IACjB;QAAR,KAAK,EAAE;qDAA6B;IAC5B;QAAR,KAAK,EAAE;oEAA+E;IAC7E;QAAT,MAAM,EAAE;uDAA6I;IAN7I,mBAAmB;QAJ/B,SAAS,CAAC;YACP,QAAQ,EAAE,aAAa;YACvB,QAAQ,EAAE,iDAA+C;SAC5D,CAAC;OACW,mBAAmB,CAyB/B;IAAD,0BAAC;CAAA,AAzBD,IAyBC;SAzBY,mBAAmB","sourcesContent":["import { NgxCroppieModule } from './ngx-croppie';\nimport { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ViewEncapsulation, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport Croppie from 'croppie';\nimport { CroppieOptions, ResultOptions } from 'croppie';\n\nexport type Type = 'canvas' | 'base64' | 'html' | 'blob' | 'rawcanvas';\n\nexport interface TempResultOptions extends ResultOptions {\n    type?: Type;\n    size?: any;\n}\n\n@Component({\n    selector: 'ngx-croppie',\n    template: `<div #imageEdit (update)=\"newResult()\"></div>`\n})\nexport class NgxCroppieComponent implements OnInit {\n    @ViewChild('imageEdit') imageEdit: ElementRef;\n    @Input() croppieOptions: CroppieOptions;\n    @Input() imageUrl: string;\n    @Input() bind: (img: string) => void;\n    @Input() outputFormatOptions: TempResultOptions = { type: 'base64', size: 'viewport' };\n    @Output() result: EventEmitter<string | HTMLElement | Blob | HTMLCanvasElement> = new EventEmitter<string | HTMLElement | Blob | HTMLCanvasElement>();\n\n    public _croppie: Croppie;\n    ngOnInit(): void {\n        this._croppie = new Croppie(this.imageEdit.nativeElement, this.croppieOptions);\n\n        this._croppie.bind({\n            url: this.imageUrl\n        });\n        this.bind = (img: string) => {\n            this._croppie.bind({ url: this.imageUrl });\n        }\n    }\n\n    newResult() {\n        this._croppie.result(this.outputFormatOptions).then((res) => {\n            this.result.emit(res);\n        });\n    }\n}\n"]}